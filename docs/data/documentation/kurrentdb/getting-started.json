{"variants":[{"paths":["\/documentation\/kurrentdb\/getting-started"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"text":"Getting the library","anchor":"Getting-the-library","type":"heading","level":2},{"level":3,"anchor":"Swift-Package-Manager","text":"Swift Package Manager","type":"heading"},{"inlineContent":[{"text":"The Swift Package Manager is the preferred way to get EventStoreDB. Simply add the package dependency to your Package.swift:","type":"text"}],"type":"paragraph"},{"code":["dependencies: [","  .package(url: \"https:\/\/github.com\/gradyzhuo\/eventstoredb-swift.git\", from: \"1.0.0\")","]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"…and depend on “EventStoreDB” in the necessary targets:","type":"text"}]},{"syntax":"swift","code":[".target(","  name: ...,","  dependencies: [.product(name: \"EventStoreDB\", package: \"eventstoredb-swift\")]","]"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Connection-string","text":"Connection string"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/getting-started.html#connection-string","isActive":true}]},{"inlineContent":[{"text":"The connection string has the following format:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["esdb+discover:\/\/admin:changeit@cluster.dns.name:2113"]},{"inlineContent":[{"text":"There, cluster.dns.name is the name of a DNS A record that points to all the cluster nodes. Alternatively, you can list cluster nodes separated by comma instead of the cluster DNS name:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["esdb+discover:\/\/admin:changeit@node1.dns.name:2113,node2.dns.name:2113,node3.dns.name:2113"],"syntax":null},{"anchor":"Client-Settings","text":"Client Settings","level":2,"type":"heading"},{"inlineContent":[{"text":"You can build a client settings for a single node configuration by parsing a connection string.","type":"text"}],"type":"paragraph"},{"code":["let settings: ClientSettings = .parse(connectionString: \"esdb:\/\/admin:changeit@localhost:2113\")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"or you can also build it with a string literal, like:"}]},{"syntax":"swift","code":["let settings: ClientSettings = \"esdb:\/\/admin:changeit@localhost:2113\".parse()","","\/\/ or using string literal directly.","let settings: ClientSettings = \"esdb:\/\/admin:changeit@localhost:2113\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use a convenience static method in development mode to connect to ","type":"text"},{"type":"codeVoice","code":"localhost"},{"type":"text","text":"."}]},{"syntax":"swift","code":["\/\/ settings with credentials","let settings: ClientSettings = .localhost(userCredentials: .init(username: \"admin\", ","                                                                   password: \"changeit\")","","\/\/settings with credentials with adding ssl file by path","let settings: ClientSettings = .localhost(userCredentials: .init(username: \"admin\", ","                                                                            password: \"changeit\"), ","                                                                 trustRoots: .file(\"...filePath...\"))","","\/\/or add ssl file with bundle","let settings: ClientSettings = .localhost(userCredentials: .init(username: \"admin\", ","                                                                 password: \"changeit\"), ","                                                                 trustRoots: .fileInBundle(forResource: \"ca\", ","                                                                                           withExtension: \"crt\", ","                                                                                        inBundle: .main))"],"type":"codeListing"},{"level":2,"anchor":"Creating-a-client","text":"Creating a client","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"First, create a client and get it connected to the database.","type":"text"}]},{"code":["let settings: ClientSettings = .localhost()","let client = KurrentDBClient(settings: settings)"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Creating an event","anchor":"Creating-an-event","level":2},{"inlineContent":[{"text":"In ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":", the payload in EventData conforms to the Codable protocol, which means you can use any type that can be encoded or decoded to ","type":"text"},{"code":"JSON","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"User-defined server-side projections require events to be serialized in JSON format."},{"text":" ","type":"text"},{"type":"codeVoice","code":"KurrentDB"},{"type":"text","text":" use JSON for serialization in the documentation examples."}],"type":"paragraph"}],"type":"aside","style":"note"},{"level":3,"anchor":"Using-a-string-as-the-payload","type":"heading","text":"Using a string as the payload"},{"type":"codeListing","syntax":"swift","code":["let eventData = EventData(","    id: UUID(),","    eventType: \"TestEvent\",","    payload: \"I wrote my first event!\"",")",""]},{"text":"Using a customized event model as the payload","type":"heading","anchor":"Using-a-customized-event-model-as-the-payload","level":3},{"type":"codeListing","code":["struct TestEvent: Codable {","    let note: String","}","","let eventModel = TestEvent(note: \"I wrote my first event!\")","","let eventData = EventData(","    id: UUID(),","    eventType: \"TestEvent\",","    payload: eventModel",")"],"syntax":null},{"level":2,"text":"Appending Event","anchor":"Appending-Event","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Each event in the database has its own unique identifier (UUID). The database uses it to ensure idempotent writes, but it only works if you specify the stream revision when appending events to the stream.","type":"text"}]},{"inlineContent":[{"text":"In the snippet below, we append the event to the stream ","type":"text"},{"code":"some-stream","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["try await client.appendStream(to: \"some-stream\", events: [eventData]) { options in","    options.revision(expected: .any)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are appending events without checking if the stream exists or if the stream version matches the expected event version. See more advanced scenarios in appending "},{"type":"reference","identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/appending-events.html","isActive":true},{"type":"text","text":"."}]},{"level":2,"text":"Reading events","anchor":"Reading-events","type":"heading"},{"inlineContent":[{"type":"text","text":"Finally, we can read events back from the "},{"code":"some-stream","type":"codeVoice"},{"type":"text","text":" stream."}],"type":"paragraph"},{"code":["\/\/ Import packages of KurrentDB.","import KurrentDB","","\/\/ Using a client settings for a single node configuration by parsing a connection string.","let settings: ClientSettings = .localhost()","","\/\/ Create an identifier of stream.","let streamIdentifier = StreamIdentifier(name: \"stream_for_testing\")","","\/\/ Build a streams client.","let client = EventStoreDBClient(settings: settings)","","\/\/ Read events from stream.","let responses = try await client.readStream(to: streamIdentifier, cursor: .start) {","    $0.set(limit: 10)","}","","\/\/ loop it.","for try await response in responses {","    \/\/handle response of event","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"When you read events from the stream, you get a collection of ","type":"text"},{"type":"codeVoice","code":"ResolvedEvent"},{"type":"text","text":" structures. The event payload is returned as a byte array and needs to be deserialized. See more advanced scenarios in "},{"identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/reading-events.html","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"kind":"article","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"article","title":"Getting started","modules":[{"name":"KurrentDB"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/KurrentDB\/documentation\/KurrentDB"]]},"identifier":{"url":"doc:\/\/KurrentDB\/documentation\/KurrentDB\/Getting-started","interfaceLanguage":"swift"},"abstract":[{"text":"Get started by connecting your application to EventStoreDB.","type":"text"}],"references":{"https://docs.kurrent.io/clients/grpc/reading-events.html":{"title":"reading events documentation","type":"link","identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/reading-events.html","titleInlineContent":[{"text":"reading events documentation","type":"text"}],"url":"https:\/\/docs.kurrent.io\/clients\/grpc\/reading-events.html"},"https://github.com/grpc/grpc-swift.git":{"titleInlineContent":[{"text":"gRPC","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/grpc\/grpc-swift.git","title":"gRPC","url":"https:\/\/github.com\/grpc\/grpc-swift.git"},"https://docs.kurrent.io/clients/grpc/appending-events.html":{"titleInlineContent":[{"text":"events documentation","type":"text"}],"type":"link","identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/appending-events.html","title":"events documentation","url":"https:\/\/docs.kurrent.io\/clients\/grpc\/appending-events.html"},"https://www.swift.org/":{"title":"Swift language","type":"link","identifier":"https:\/\/www.swift.org\/","titleInlineContent":[{"text":"Swift language","type":"text"}],"url":"https:\/\/www.swift.org\/"},"https://docs.kurrent.io/clients/grpc/getting-started.html#connection-string":{"title":"Official Reference","type":"link","identifier":"https:\/\/docs.kurrent.io\/clients\/grpc\/getting-started.html#connection-string","titleInlineContent":[{"text":"Official Reference","type":"text"}],"url":"https:\/\/docs.kurrent.io\/clients\/grpc\/getting-started.html#connection-string"},"doc://KurrentDB/documentation/KurrentDB":{"role":"collection","kind":"symbol","title":"KurrentDB","identifier":"doc:\/\/KurrentDB\/documentation\/KurrentDB","url":"\/documentation\/kurrentdb","abstract":[{"type":"text","text":"This is unofficial "},{"type":"reference","identifier":"https:\/\/www.kurrent.io\/","isActive":true},{"text":" (formerly: EventStore) Database ","type":"text"},{"identifier":"https:\/\/github.com\/grpc\/grpc-swift.git","type":"reference","isActive":true},{"text":" Client SDK, developing in ","type":"text"},{"identifier":"https:\/\/www.swift.org\/","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"topic"},"https://www.kurrent.io/":{"title":"Kurrent","type":"link","identifier":"https:\/\/www.kurrent.io\/","titleInlineContent":[{"text":"Kurrent","type":"text"}],"url":"https:\/\/www.kurrent.io\/"}}}