//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/cluster.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `EventStore_Cluster_GossipClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Cluster_GossipClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? { get }

    func update(
        _ request: EventStore_Cluster_GossipRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo>

    func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo>
}

extension EventStore_Cluster_GossipClientProtocol {
    public var serviceName: String {
        "event_store.cluster.Gossip"
    }

    /// Unary call to Update
    ///
    /// - Parameters:
    ///   - request: Request to send to Update.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func update(
        _ request: EventStore_Cluster_GossipRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo> {
        makeUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    /// Unary call to Read
    ///
    /// - Parameters:
    ///   - request: Request to send to Read.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo> {
        makeUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension EventStore_Cluster_GossipClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Cluster_GossipNIOClient")
public final class EventStore_Cluster_GossipClient: EventStore_Cluster_GossipClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the event_store.cluster.Gossip service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct EventStore_Cluster_GossipNIOClient: EventStore_Cluster_GossipClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol?

    /// Creates a client for the event_store.cluster.Gossip service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Cluster_GossipAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? { get }

    func makeUpdateCall(
        _ request: EventStore_Cluster_GossipRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo>

    func makeReadCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_GossipAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Cluster_GossipClientMetadata.serviceDescriptor
    }

    public var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? {
        nil
    }

    public func makeUpdateCall(
        _ request: EventStore_Cluster_GossipRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    public func makeReadCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_GossipAsyncClientProtocol {
    public func update(
        _ request: EventStore_Cluster_GossipRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Cluster_ClusterInfo {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    public func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Cluster_ClusterInfo {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Cluster_GossipAsyncClient: EventStore_Cluster_GossipAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol EventStore_Cluster_GossipClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'update'.
    func makeUpdateInterceptors() -> [ClientInterceptor<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo>]

    /// - Returns: Interceptors to use when invoking 'read'.
    func makeReadInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo>]
}

public enum EventStore_Cluster_GossipClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Gossip",
        fullName: "event_store.cluster.Gossip",
        methods: [
            EventStore_Cluster_GossipClientMetadata.Methods.update,
            EventStore_Cluster_GossipClientMetadata.Methods.read,
        ]
    )

    public enum Methods {
        public static let update = GRPCMethodDescriptor(
            name: "Update",
            path: "/event_store.cluster.Gossip/Update",
            type: GRPCCallType.unary
        )

        public static let read = GRPCMethodDescriptor(
            name: "Read",
            path: "/event_store.cluster.Gossip/Read",
            type: GRPCCallType.unary
        )
    }
}

/// Usage: instantiate `EventStore_Cluster_ElectionsClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Cluster_ElectionsClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? { get }

    func viewChange(
        _ request: EventStore_Cluster_ViewChangeRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty>

    func viewChangeProof(
        _ request: EventStore_Cluster_ViewChangeProofRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty>

    func prepare(
        _ request: EventStore_Cluster_PrepareRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty>

    func prepareOk(
        _ request: EventStore_Cluster_PrepareOkRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty>

    func proposal(
        _ request: EventStore_Cluster_ProposalRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty>

    func accept(
        _ request: EventStore_Cluster_AcceptRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty>

    func leaderIsResigning(
        _ request: EventStore_Cluster_LeaderIsResigningRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty>

    func leaderIsResigningOk(
        _ request: EventStore_Cluster_LeaderIsResigningOkRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty>
}

extension EventStore_Cluster_ElectionsClientProtocol {
    public var serviceName: String {
        "event_store.cluster.Elections"
    }

    /// Unary call to ViewChange
    ///
    /// - Parameters:
    ///   - request: Request to send to ViewChange.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func viewChange(
        _ request: EventStore_Cluster_ViewChangeRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChange.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeInterceptors() ?? []
        )
    }

    /// Unary call to ViewChangeProof
    ///
    /// - Parameters:
    ///   - request: Request to send to ViewChangeProof.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func viewChangeProof(
        _ request: EventStore_Cluster_ViewChangeProofRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChangeProof.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeProofInterceptors() ?? []
        )
    }

    /// Unary call to Prepare
    ///
    /// - Parameters:
    ///   - request: Request to send to Prepare.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func prepare(
        _ request: EventStore_Cluster_PrepareRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepare.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareInterceptors() ?? []
        )
    }

    /// Unary call to PrepareOk
    ///
    /// - Parameters:
    ///   - request: Request to send to PrepareOk.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func prepareOk(
        _ request: EventStore_Cluster_PrepareOkRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepareOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareOkInterceptors() ?? []
        )
    }

    /// Unary call to Proposal
    ///
    /// - Parameters:
    ///   - request: Request to send to Proposal.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func proposal(
        _ request: EventStore_Cluster_ProposalRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.proposal.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeProposalInterceptors() ?? []
        )
    }

    /// Unary call to Accept
    ///
    /// - Parameters:
    ///   - request: Request to send to Accept.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func accept(
        _ request: EventStore_Cluster_AcceptRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.accept.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAcceptInterceptors() ?? []
        )
    }

    /// Unary call to LeaderIsResigning
    ///
    /// - Parameters:
    ///   - request: Request to send to LeaderIsResigning.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func leaderIsResigning(
        _ request: EventStore_Cluster_LeaderIsResigningRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigning.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningInterceptors() ?? []
        )
    }

    /// Unary call to LeaderIsResigningOk
    ///
    /// - Parameters:
    ///   - request: Request to send to LeaderIsResigningOk.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func leaderIsResigningOk(
        _ request: EventStore_Cluster_LeaderIsResigningOkRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigningOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningOkInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension EventStore_Cluster_ElectionsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Cluster_ElectionsNIOClient")
public final class EventStore_Cluster_ElectionsClient: EventStore_Cluster_ElectionsClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the event_store.cluster.Elections service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct EventStore_Cluster_ElectionsNIOClient: EventStore_Cluster_ElectionsClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol?

    /// Creates a client for the event_store.cluster.Elections service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Cluster_ElectionsAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? { get }

    func makeViewChangeCall(
        _ request: EventStore_Cluster_ViewChangeRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty>

    func makeViewChangeProofCall(
        _ request: EventStore_Cluster_ViewChangeProofRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty>

    func makePrepareCall(
        _ request: EventStore_Cluster_PrepareRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty>

    func makePrepareOkCall(
        _ request: EventStore_Cluster_PrepareOkRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty>

    func makeProposalCall(
        _ request: EventStore_Cluster_ProposalRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty>

    func makeAcceptCall(
        _ request: EventStore_Cluster_AcceptRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty>

    func makeLeaderIsResigningCall(
        _ request: EventStore_Cluster_LeaderIsResigningRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty>

    func makeLeaderIsResigningOkCall(
        _ request: EventStore_Cluster_LeaderIsResigningOkRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_ElectionsAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Cluster_ElectionsClientMetadata.serviceDescriptor
    }

    public var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? {
        nil
    }

    public func makeViewChangeCall(
        _ request: EventStore_Cluster_ViewChangeRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChange.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeInterceptors() ?? []
        )
    }

    public func makeViewChangeProofCall(
        _ request: EventStore_Cluster_ViewChangeProofRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChangeProof.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeProofInterceptors() ?? []
        )
    }

    public func makePrepareCall(
        _ request: EventStore_Cluster_PrepareRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepare.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareInterceptors() ?? []
        )
    }

    public func makePrepareOkCall(
        _ request: EventStore_Cluster_PrepareOkRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepareOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareOkInterceptors() ?? []
        )
    }

    public func makeProposalCall(
        _ request: EventStore_Cluster_ProposalRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.proposal.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeProposalInterceptors() ?? []
        )
    }

    public func makeAcceptCall(
        _ request: EventStore_Cluster_AcceptRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.accept.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAcceptInterceptors() ?? []
        )
    }

    public func makeLeaderIsResigningCall(
        _ request: EventStore_Cluster_LeaderIsResigningRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigning.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningInterceptors() ?? []
        )
    }

    public func makeLeaderIsResigningOkCall(
        _ request: EventStore_Cluster_LeaderIsResigningOkRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigningOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningOkInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_ElectionsAsyncClientProtocol {
    public func viewChange(
        _ request: EventStore_Cluster_ViewChangeRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChange.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeInterceptors() ?? []
        )
    }

    public func viewChangeProof(
        _ request: EventStore_Cluster_ViewChangeProofRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.viewChangeProof.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeViewChangeProofInterceptors() ?? []
        )
    }

    public func prepare(
        _ request: EventStore_Cluster_PrepareRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepare.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareInterceptors() ?? []
        )
    }

    public func prepareOk(
        _ request: EventStore_Cluster_PrepareOkRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.prepareOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePrepareOkInterceptors() ?? []
        )
    }

    public func proposal(
        _ request: EventStore_Cluster_ProposalRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.proposal.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeProposalInterceptors() ?? []
        )
    }

    public func accept(
        _ request: EventStore_Cluster_AcceptRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.accept.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAcceptInterceptors() ?? []
        )
    }

    public func leaderIsResigning(
        _ request: EventStore_Cluster_LeaderIsResigningRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigning.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningInterceptors() ?? []
        )
    }

    public func leaderIsResigningOk(
        _ request: EventStore_Cluster_LeaderIsResigningOkRequest,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigningOk.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLeaderIsResigningOkInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Cluster_ElectionsAsyncClient: EventStore_Cluster_ElectionsAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol EventStore_Cluster_ElectionsClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'viewChange'.
    func makeViewChangeInterceptors() -> [ClientInterceptor<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'viewChangeProof'.
    func makeViewChangeProofInterceptors() -> [ClientInterceptor<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'prepare'.
    func makePrepareInterceptors() -> [ClientInterceptor<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'prepareOk'.
    func makePrepareOkInterceptors() -> [ClientInterceptor<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'proposal'.
    func makeProposalInterceptors() -> [ClientInterceptor<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'accept'.
    func makeAcceptInterceptors() -> [ClientInterceptor<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'leaderIsResigning'.
    func makeLeaderIsResigningInterceptors() -> [ClientInterceptor<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when invoking 'leaderIsResigningOk'.
    func makeLeaderIsResigningOkInterceptors() -> [ClientInterceptor<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty>]
}

public enum EventStore_Cluster_ElectionsClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Elections",
        fullName: "event_store.cluster.Elections",
        methods: [
            EventStore_Cluster_ElectionsClientMetadata.Methods.viewChange,
            EventStore_Cluster_ElectionsClientMetadata.Methods.viewChangeProof,
            EventStore_Cluster_ElectionsClientMetadata.Methods.prepare,
            EventStore_Cluster_ElectionsClientMetadata.Methods.prepareOk,
            EventStore_Cluster_ElectionsClientMetadata.Methods.proposal,
            EventStore_Cluster_ElectionsClientMetadata.Methods.accept,
            EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigning,
            EventStore_Cluster_ElectionsClientMetadata.Methods.leaderIsResigningOk,
        ]
    )

    public enum Methods {
        public static let viewChange = GRPCMethodDescriptor(
            name: "ViewChange",
            path: "/event_store.cluster.Elections/ViewChange",
            type: GRPCCallType.unary
        )

        public static let viewChangeProof = GRPCMethodDescriptor(
            name: "ViewChangeProof",
            path: "/event_store.cluster.Elections/ViewChangeProof",
            type: GRPCCallType.unary
        )

        public static let prepare = GRPCMethodDescriptor(
            name: "Prepare",
            path: "/event_store.cluster.Elections/Prepare",
            type: GRPCCallType.unary
        )

        public static let prepareOk = GRPCMethodDescriptor(
            name: "PrepareOk",
            path: "/event_store.cluster.Elections/PrepareOk",
            type: GRPCCallType.unary
        )

        public static let proposal = GRPCMethodDescriptor(
            name: "Proposal",
            path: "/event_store.cluster.Elections/Proposal",
            type: GRPCCallType.unary
        )

        public static let accept = GRPCMethodDescriptor(
            name: "Accept",
            path: "/event_store.cluster.Elections/Accept",
            type: GRPCCallType.unary
        )

        public static let leaderIsResigning = GRPCMethodDescriptor(
            name: "LeaderIsResigning",
            path: "/event_store.cluster.Elections/LeaderIsResigning",
            type: GRPCCallType.unary
        )

        public static let leaderIsResigningOk = GRPCMethodDescriptor(
            name: "LeaderIsResigningOk",
            path: "/event_store.cluster.Elections/LeaderIsResigningOk",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Cluster_GossipProvider: CallHandlerProvider {
    var interceptors: EventStore_Cluster_GossipServerInterceptorFactoryProtocol? { get }

    func update(request: EventStore_Cluster_GossipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Cluster_ClusterInfo>

    func read(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Cluster_ClusterInfo>
}

extension EventStore_Cluster_GossipProvider {
    public var serviceName: Substring {
        EventStore_Cluster_GossipServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Update":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_GossipRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
                interceptors: interceptors?.makeUpdateInterceptors() ?? [],
                userFunction: update(request:context:)
            )

        case "Read":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
                interceptors: interceptors?.makeReadInterceptors() ?? [],
                userFunction: read(request:context:)
            )

        default:
            nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Cluster_GossipAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Cluster_GossipServerInterceptorFactoryProtocol? { get }

    func update(
        request: EventStore_Cluster_GossipRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Cluster_ClusterInfo

    func read(
        request: EventStore_Client_Empty,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Cluster_ClusterInfo
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_GossipAsyncProvider {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Cluster_GossipServerMetadata.serviceDescriptor
    }

    public var serviceName: Substring {
        EventStore_Cluster_GossipServerMetadata.serviceDescriptor.fullName[...]
    }

    public var interceptors: EventStore_Cluster_GossipServerInterceptorFactoryProtocol? {
        nil
    }

    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Update":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_GossipRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
                interceptors: interceptors?.makeUpdateInterceptors() ?? [],
                wrapping: { try await self.update(request: $0, context: $1) }
            )

        case "Read":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
                interceptors: interceptors?.makeReadInterceptors() ?? [],
                wrapping: { try await self.read(request: $0, context: $1) }
            )

        default:
            nil
        }
    }
}

public protocol EventStore_Cluster_GossipServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'update'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpdateInterceptors() -> [ServerInterceptor<EventStore_Cluster_GossipRequest, EventStore_Cluster_ClusterInfo>]

    /// - Returns: Interceptors to use when handling 'read'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeReadInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Cluster_ClusterInfo>]
}

public enum EventStore_Cluster_GossipServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Gossip",
        fullName: "event_store.cluster.Gossip",
        methods: [
            EventStore_Cluster_GossipServerMetadata.Methods.update,
            EventStore_Cluster_GossipServerMetadata.Methods.read,
        ]
    )

    public enum Methods {
        public static let update = GRPCMethodDescriptor(
            name: "Update",
            path: "/event_store.cluster.Gossip/Update",
            type: GRPCCallType.unary
        )

        public static let read = GRPCMethodDescriptor(
            name: "Read",
            path: "/event_store.cluster.Gossip/Read",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Cluster_ElectionsProvider: CallHandlerProvider {
    var interceptors: EventStore_Cluster_ElectionsServerInterceptorFactoryProtocol? { get }

    func viewChange(request: EventStore_Cluster_ViewChangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func viewChangeProof(request: EventStore_Cluster_ViewChangeProofRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func prepare(request: EventStore_Cluster_PrepareRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func prepareOk(request: EventStore_Cluster_PrepareOkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func proposal(request: EventStore_Cluster_ProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func accept(request: EventStore_Cluster_AcceptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func leaderIsResigning(request: EventStore_Cluster_LeaderIsResigningRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

    func leaderIsResigningOk(request: EventStore_Cluster_LeaderIsResigningOkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>
}

extension EventStore_Cluster_ElectionsProvider {
    public var serviceName: Substring {
        EventStore_Cluster_ElectionsServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "ViewChange":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ViewChangeRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeViewChangeInterceptors() ?? [],
                userFunction: viewChange(request:context:)
            )

        case "ViewChangeProof":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ViewChangeProofRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeViewChangeProofInterceptors() ?? [],
                userFunction: viewChangeProof(request:context:)
            )

        case "Prepare":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_PrepareRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makePrepareInterceptors() ?? [],
                userFunction: prepare(request:context:)
            )

        case "PrepareOk":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_PrepareOkRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makePrepareOkInterceptors() ?? [],
                userFunction: prepareOk(request:context:)
            )

        case "Proposal":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ProposalRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeProposalInterceptors() ?? [],
                userFunction: proposal(request:context:)
            )

        case "Accept":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_AcceptRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeAcceptInterceptors() ?? [],
                userFunction: accept(request:context:)
            )

        case "LeaderIsResigning":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeLeaderIsResigningInterceptors() ?? [],
                userFunction: leaderIsResigning(request:context:)
            )

        case "LeaderIsResigningOk":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningOkRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeLeaderIsResigningOkInterceptors() ?? [],
                userFunction: leaderIsResigningOk(request:context:)
            )

        default:
            nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Cluster_ElectionsAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Cluster_ElectionsServerInterceptorFactoryProtocol? { get }

    func viewChange(
        request: EventStore_Cluster_ViewChangeRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func viewChangeProof(
        request: EventStore_Cluster_ViewChangeProofRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func prepare(
        request: EventStore_Cluster_PrepareRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func prepareOk(
        request: EventStore_Cluster_PrepareOkRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func proposal(
        request: EventStore_Cluster_ProposalRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func accept(
        request: EventStore_Cluster_AcceptRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func leaderIsResigning(
        request: EventStore_Cluster_LeaderIsResigningRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty

    func leaderIsResigningOk(
        request: EventStore_Cluster_LeaderIsResigningOkRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Cluster_ElectionsAsyncProvider {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Cluster_ElectionsServerMetadata.serviceDescriptor
    }

    public var serviceName: Substring {
        EventStore_Cluster_ElectionsServerMetadata.serviceDescriptor.fullName[...]
    }

    public var interceptors: EventStore_Cluster_ElectionsServerInterceptorFactoryProtocol? {
        nil
    }

    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "ViewChange":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ViewChangeRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeViewChangeInterceptors() ?? [],
                wrapping: { try await self.viewChange(request: $0, context: $1) }
            )

        case "ViewChangeProof":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ViewChangeProofRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeViewChangeProofInterceptors() ?? [],
                wrapping: { try await self.viewChangeProof(request: $0, context: $1) }
            )

        case "Prepare":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_PrepareRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makePrepareInterceptors() ?? [],
                wrapping: { try await self.prepare(request: $0, context: $1) }
            )

        case "PrepareOk":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_PrepareOkRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makePrepareOkInterceptors() ?? [],
                wrapping: { try await self.prepareOk(request: $0, context: $1) }
            )

        case "Proposal":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_ProposalRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeProposalInterceptors() ?? [],
                wrapping: { try await self.proposal(request: $0, context: $1) }
            )

        case "Accept":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_AcceptRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeAcceptInterceptors() ?? [],
                wrapping: { try await self.accept(request: $0, context: $1) }
            )

        case "LeaderIsResigning":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeLeaderIsResigningInterceptors() ?? [],
                wrapping: { try await self.leaderIsResigning(request: $0, context: $1) }
            )

        case "LeaderIsResigningOk":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningOkRequest>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeLeaderIsResigningOkInterceptors() ?? [],
                wrapping: { try await self.leaderIsResigningOk(request: $0, context: $1) }
            )

        default:
            nil
        }
    }
}

public protocol EventStore_Cluster_ElectionsServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'viewChange'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeViewChangeInterceptors() -> [ServerInterceptor<EventStore_Cluster_ViewChangeRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'viewChangeProof'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeViewChangeProofInterceptors() -> [ServerInterceptor<EventStore_Cluster_ViewChangeProofRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'prepare'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makePrepareInterceptors() -> [ServerInterceptor<EventStore_Cluster_PrepareRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'prepareOk'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makePrepareOkInterceptors() -> [ServerInterceptor<EventStore_Cluster_PrepareOkRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'proposal'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeProposalInterceptors() -> [ServerInterceptor<EventStore_Cluster_ProposalRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'accept'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAcceptInterceptors() -> [ServerInterceptor<EventStore_Cluster_AcceptRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'leaderIsResigning'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeLeaderIsResigningInterceptors() -> [ServerInterceptor<EventStore_Cluster_LeaderIsResigningRequest, EventStore_Client_Empty>]

    /// - Returns: Interceptors to use when handling 'leaderIsResigningOk'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeLeaderIsResigningOkInterceptors() -> [ServerInterceptor<EventStore_Cluster_LeaderIsResigningOkRequest, EventStore_Client_Empty>]
}

public enum EventStore_Cluster_ElectionsServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Elections",
        fullName: "event_store.cluster.Elections",
        methods: [
            EventStore_Cluster_ElectionsServerMetadata.Methods.viewChange,
            EventStore_Cluster_ElectionsServerMetadata.Methods.viewChangeProof,
            EventStore_Cluster_ElectionsServerMetadata.Methods.prepare,
            EventStore_Cluster_ElectionsServerMetadata.Methods.prepareOk,
            EventStore_Cluster_ElectionsServerMetadata.Methods.proposal,
            EventStore_Cluster_ElectionsServerMetadata.Methods.accept,
            EventStore_Cluster_ElectionsServerMetadata.Methods.leaderIsResigning,
            EventStore_Cluster_ElectionsServerMetadata.Methods.leaderIsResigningOk,
        ]
    )

    public enum Methods {
        public static let viewChange = GRPCMethodDescriptor(
            name: "ViewChange",
            path: "/event_store.cluster.Elections/ViewChange",
            type: GRPCCallType.unary
        )

        public static let viewChangeProof = GRPCMethodDescriptor(
            name: "ViewChangeProof",
            path: "/event_store.cluster.Elections/ViewChangeProof",
            type: GRPCCallType.unary
        )

        public static let prepare = GRPCMethodDescriptor(
            name: "Prepare",
            path: "/event_store.cluster.Elections/Prepare",
            type: GRPCCallType.unary
        )

        public static let prepareOk = GRPCMethodDescriptor(
            name: "PrepareOk",
            path: "/event_store.cluster.Elections/PrepareOk",
            type: GRPCCallType.unary
        )

        public static let proposal = GRPCMethodDescriptor(
            name: "Proposal",
            path: "/event_store.cluster.Elections/Proposal",
            type: GRPCCallType.unary
        )

        public static let accept = GRPCMethodDescriptor(
            name: "Accept",
            path: "/event_store.cluster.Elections/Accept",
            type: GRPCCallType.unary
        )

        public static let leaderIsResigning = GRPCMethodDescriptor(
            name: "LeaderIsResigning",
            path: "/event_store.cluster.Elections/LeaderIsResigning",
            type: GRPCCallType.unary
        )

        public static let leaderIsResigningOk = GRPCMethodDescriptor(
            name: "LeaderIsResigningOk",
            path: "/event_store.cluster.Elections/LeaderIsResigningOk",
            type: GRPCCallType.unary
        )
    }
}
