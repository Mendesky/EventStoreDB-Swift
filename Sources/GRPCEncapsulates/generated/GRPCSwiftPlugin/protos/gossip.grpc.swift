//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/gossip.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `EventStore_Client_Gossip_GossipClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Client_Gossip_GossipClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? { get }

    func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo>
}

extension EventStore_Client_Gossip_GossipClientProtocol {
    public var serviceName: String {
        "event_store.client.gossip.Gossip"
    }

    /// Unary call to Read
    ///
    /// - Parameters:
    ///   - request: Request to send to Read.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo> {
        makeUnaryCall(
            path: EventStore_Client_Gossip_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension EventStore_Client_Gossip_GossipClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Client_Gossip_GossipNIOClient")
public final class EventStore_Client_Gossip_GossipClient: EventStore_Client_Gossip_GossipClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the event_store.client.gossip.Gossip service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct EventStore_Client_Gossip_GossipNIOClient: EventStore_Client_Gossip_GossipClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol?

    /// Creates a client for the event_store.client.gossip.Gossip service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Gossip_GossipAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? { get }

    func makeReadCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Gossip_GossipAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Gossip_GossipClientMetadata.serviceDescriptor
    }

    public var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? {
        nil
    }

    public func makeReadCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Gossip_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Gossip_GossipAsyncClientProtocol {
    public func read(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Gossip_ClusterInfo {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Gossip_GossipClientMetadata.Methods.read.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeReadInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Client_Gossip_GossipAsyncClient: EventStore_Client_Gossip_GossipAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol EventStore_Client_Gossip_GossipClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'read'.
    func makeReadInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo>]
}

public enum EventStore_Client_Gossip_GossipClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Gossip",
        fullName: "event_store.client.gossip.Gossip",
        methods: [
            EventStore_Client_Gossip_GossipClientMetadata.Methods.read,
        ]
    )

    public enum Methods {
        public static let read = GRPCMethodDescriptor(
            name: "Read",
            path: "/event_store.client.gossip.Gossip/Read",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Client_Gossip_GossipProvider: CallHandlerProvider {
    var interceptors: EventStore_Client_Gossip_GossipServerInterceptorFactoryProtocol? { get }

    func read(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Gossip_ClusterInfo>
}

extension EventStore_Client_Gossip_GossipProvider {
    public var serviceName: Substring {
        EventStore_Client_Gossip_GossipServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Read":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Gossip_ClusterInfo>(),
                interceptors: interceptors?.makeReadInterceptors() ?? [],
                userFunction: read(request:context:)
            )

        default:
            nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Gossip_GossipAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Gossip_GossipServerInterceptorFactoryProtocol? { get }

    func read(
        request: EventStore_Client_Empty,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Gossip_ClusterInfo
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Gossip_GossipAsyncProvider {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Gossip_GossipServerMetadata.serviceDescriptor
    }

    public var serviceName: Substring {
        EventStore_Client_Gossip_GossipServerMetadata.serviceDescriptor.fullName[...]
    }

    public var interceptors: EventStore_Client_Gossip_GossipServerInterceptorFactoryProtocol? {
        nil
    }

    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Read":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Gossip_ClusterInfo>(),
                interceptors: interceptors?.makeReadInterceptors() ?? [],
                wrapping: { try await self.read(request: $0, context: $1) }
            )

        default:
            nil
        }
    }
}

public protocol EventStore_Client_Gossip_GossipServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'read'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeReadInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Gossip_ClusterInfo>]
}

public enum EventStore_Client_Gossip_GossipServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Gossip",
        fullName: "event_store.client.gossip.Gossip",
        methods: [
            EventStore_Client_Gossip_GossipServerMetadata.Methods.read,
        ]
    )

    public enum Methods {
        public static let read = GRPCMethodDescriptor(
            name: "Read",
            path: "/event_store.client.gossip.Gossip/Read",
            type: GRPCCallType.unary
        )
    }
}
