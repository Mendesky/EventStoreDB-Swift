//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/projections.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `EventStore_Client_Projections_ProjectionsClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Client_Projections_ProjectionsClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? { get }

    func create(
        _ request: EventStore_Client_Projections_CreateReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp>

    func update(
        _ request: EventStore_Client_Projections_UpdateReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp>

    func delete(
        _ request: EventStore_Client_Projections_DeleteReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp>

    func statistics(
        _ request: EventStore_Client_Projections_StatisticsReq,
        callOptions: CallOptions?,
        handler: @escaping (EventStore_Client_Projections_StatisticsResp) -> Void
    ) -> ServerStreamingCall<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp>

    func disable(
        _ request: EventStore_Client_Projections_DisableReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp>

    func enable(
        _ request: EventStore_Client_Projections_EnableReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp>

    func reset(
        _ request: EventStore_Client_Projections_ResetReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp>

    func state(
        _ request: EventStore_Client_Projections_StateReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp>

    func result(
        _ request: EventStore_Client_Projections_ResultReq,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp>

    func restartSubsystem(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

extension EventStore_Client_Projections_ProjectionsClientProtocol {
    public var serviceName: String {
        "event_store.client.projections.Projections"
    }

    /// Unary call to Create
    ///
    /// - Parameters:
    ///   - request: Request to send to Create.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func create(
        _ request: EventStore_Client_Projections_CreateReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.create.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateInterceptors() ?? []
        )
    }

    /// Unary call to Update
    ///
    /// - Parameters:
    ///   - request: Request to send to Update.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func update(
        _ request: EventStore_Client_Projections_UpdateReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    /// Unary call to Delete
    ///
    /// - Parameters:
    ///   - request: Request to send to Delete.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func delete(
        _ request: EventStore_Client_Projections_DeleteReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.delete.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteInterceptors() ?? []
        )
    }

    /// Server streaming call to Statistics
    ///
    /// - Parameters:
    ///   - request: Request to send to Statistics.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    public func statistics(
        _ request: EventStore_Client_Projections_StatisticsReq,
        callOptions: CallOptions? = nil,
        handler: @escaping (EventStore_Client_Projections_StatisticsResp) -> Void
    ) -> ServerStreamingCall<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp> {
        makeServerStreamingCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.statistics.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStatisticsInterceptors() ?? [],
            handler: handler
        )
    }

    /// Unary call to Disable
    ///
    /// - Parameters:
    ///   - request: Request to send to Disable.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func disable(
        _ request: EventStore_Client_Projections_DisableReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.disable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDisableInterceptors() ?? []
        )
    }

    /// Unary call to Enable
    ///
    /// - Parameters:
    ///   - request: Request to send to Enable.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func enable(
        _ request: EventStore_Client_Projections_EnableReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.enable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeEnableInterceptors() ?? []
        )
    }

    /// Unary call to Reset
    ///
    /// - Parameters:
    ///   - request: Request to send to Reset.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func reset(
        _ request: EventStore_Client_Projections_ResetReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    /// Unary call to State
    ///
    /// - Parameters:
    ///   - request: Request to send to State.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func state(
        _ request: EventStore_Client_Projections_StateReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.state.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStateInterceptors() ?? []
        )
    }

    /// Unary call to Result
    ///
    /// - Parameters:
    ///   - request: Request to send to Result.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func result(
        _ request: EventStore_Client_Projections_ResultReq,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.result.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResultInterceptors() ?? []
        )
    }

    /// Unary call to RestartSubsystem
    ///
    /// - Parameters:
    ///   - request: Request to send to RestartSubsystem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func restartSubsystem(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
        makeUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.restartSubsystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRestartSubsystemInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension EventStore_Client_Projections_ProjectionsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Client_Projections_ProjectionsNIOClient")
public final class EventStore_Client_Projections_ProjectionsClient: EventStore_Client_Projections_ProjectionsClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the event_store.client.projections.Projections service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct EventStore_Client_Projections_ProjectionsNIOClient: EventStore_Client_Projections_ProjectionsClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol?

    /// Creates a client for the event_store.client.projections.Projections service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Projections_ProjectionsAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? { get }

    func makeCreateCall(
        _ request: EventStore_Client_Projections_CreateReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp>

    func makeUpdateCall(
        _ request: EventStore_Client_Projections_UpdateReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp>

    func makeDeleteCall(
        _ request: EventStore_Client_Projections_DeleteReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp>

    func makeStatisticsCall(
        _ request: EventStore_Client_Projections_StatisticsReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncServerStreamingCall<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp>

    func makeDisableCall(
        _ request: EventStore_Client_Projections_DisableReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp>

    func makeEnableCall(
        _ request: EventStore_Client_Projections_EnableReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp>

    func makeResetCall(
        _ request: EventStore_Client_Projections_ResetReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp>

    func makeStateCall(
        _ request: EventStore_Client_Projections_StateReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp>

    func makeResultCall(
        _ request: EventStore_Client_Projections_ResultReq,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp>

    func makeRestartSubsystemCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Projections_ProjectionsAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Projections_ProjectionsClientMetadata.serviceDescriptor
    }

    public var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? {
        nil
    }

    public func makeCreateCall(
        _ request: EventStore_Client_Projections_CreateReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.create.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateInterceptors() ?? []
        )
    }

    public func makeUpdateCall(
        _ request: EventStore_Client_Projections_UpdateReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    public func makeDeleteCall(
        _ request: EventStore_Client_Projections_DeleteReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.delete.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteInterceptors() ?? []
        )
    }

    public func makeStatisticsCall(
        _ request: EventStore_Client_Projections_StatisticsReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncServerStreamingCall<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp> {
        makeAsyncServerStreamingCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.statistics.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStatisticsInterceptors() ?? []
        )
    }

    public func makeDisableCall(
        _ request: EventStore_Client_Projections_DisableReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.disable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDisableInterceptors() ?? []
        )
    }

    public func makeEnableCall(
        _ request: EventStore_Client_Projections_EnableReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.enable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeEnableInterceptors() ?? []
        )
    }

    public func makeResetCall(
        _ request: EventStore_Client_Projections_ResetReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    public func makeStateCall(
        _ request: EventStore_Client_Projections_StateReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.state.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStateInterceptors() ?? []
        )
    }

    public func makeResultCall(
        _ request: EventStore_Client_Projections_ResultReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.result.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResultInterceptors() ?? []
        )
    }

    public func makeRestartSubsystemCall(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
        makeAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.restartSubsystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRestartSubsystemInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Projections_ProjectionsAsyncClientProtocol {
    public func create(
        _ request: EventStore_Client_Projections_CreateReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_CreateResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.create.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateInterceptors() ?? []
        )
    }

    public func update(
        _ request: EventStore_Client_Projections_UpdateReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_UpdateResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.update.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateInterceptors() ?? []
        )
    }

    public func delete(
        _ request: EventStore_Client_Projections_DeleteReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_DeleteResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.delete.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteInterceptors() ?? []
        )
    }

    public func statistics(
        _ request: EventStore_Client_Projections_StatisticsReq,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<EventStore_Client_Projections_StatisticsResp> {
        performAsyncServerStreamingCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.statistics.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStatisticsInterceptors() ?? []
        )
    }

    public func disable(
        _ request: EventStore_Client_Projections_DisableReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_DisableResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.disable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDisableInterceptors() ?? []
        )
    }

    public func enable(
        _ request: EventStore_Client_Projections_EnableReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_EnableResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.enable.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeEnableInterceptors() ?? []
        )
    }

    public func reset(
        _ request: EventStore_Client_Projections_ResetReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_ResetResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    public func state(
        _ request: EventStore_Client_Projections_StateReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_StateResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.state.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStateInterceptors() ?? []
        )
    }

    public func result(
        _ request: EventStore_Client_Projections_ResultReq,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Projections_ResultResp {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.result.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResultInterceptors() ?? []
        )
    }

    public func restartSubsystem(
        _ request: EventStore_Client_Empty,
        callOptions: CallOptions? = nil
    ) async throws -> EventStore_Client_Empty {
        try await performAsyncUnaryCall(
            path: EventStore_Client_Projections_ProjectionsClientMetadata.Methods.restartSubsystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRestartSubsystemInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Client_Projections_ProjectionsAsyncClient: EventStore_Client_Projections_ProjectionsAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol EventStore_Client_Projections_ProjectionsClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'create'.
    func makeCreateInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp>]

    /// - Returns: Interceptors to use when invoking 'update'.
    func makeUpdateInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp>]

    /// - Returns: Interceptors to use when invoking 'delete'.
    func makeDeleteInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp>]

    /// - Returns: Interceptors to use when invoking 'statistics'.
    func makeStatisticsInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp>]

    /// - Returns: Interceptors to use when invoking 'disable'.
    func makeDisableInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp>]

    /// - Returns: Interceptors to use when invoking 'enable'.
    func makeEnableInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp>]

    /// - Returns: Interceptors to use when invoking 'reset'.
    func makeResetInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp>]

    /// - Returns: Interceptors to use when invoking 'state'.
    func makeStateInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp>]

    /// - Returns: Interceptors to use when invoking 'result'.
    func makeResultInterceptors() -> [ClientInterceptor<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp>]

    /// - Returns: Interceptors to use when invoking 'restartSubsystem'.
    func makeRestartSubsystemInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_Projections_ProjectionsClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Projections",
        fullName: "event_store.client.projections.Projections",
        methods: [
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.create,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.update,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.delete,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.statistics,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.disable,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.enable,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.reset,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.state,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.result,
            EventStore_Client_Projections_ProjectionsClientMetadata.Methods.restartSubsystem,
        ]
    )

    public enum Methods {
        public static let create = GRPCMethodDescriptor(
            name: "Create",
            path: "/event_store.client.projections.Projections/Create",
            type: GRPCCallType.unary
        )

        public static let update = GRPCMethodDescriptor(
            name: "Update",
            path: "/event_store.client.projections.Projections/Update",
            type: GRPCCallType.unary
        )

        public static let delete = GRPCMethodDescriptor(
            name: "Delete",
            path: "/event_store.client.projections.Projections/Delete",
            type: GRPCCallType.unary
        )

        public static let statistics = GRPCMethodDescriptor(
            name: "Statistics",
            path: "/event_store.client.projections.Projections/Statistics",
            type: GRPCCallType.serverStreaming
        )

        public static let disable = GRPCMethodDescriptor(
            name: "Disable",
            path: "/event_store.client.projections.Projections/Disable",
            type: GRPCCallType.unary
        )

        public static let enable = GRPCMethodDescriptor(
            name: "Enable",
            path: "/event_store.client.projections.Projections/Enable",
            type: GRPCCallType.unary
        )

        public static let reset = GRPCMethodDescriptor(
            name: "Reset",
            path: "/event_store.client.projections.Projections/Reset",
            type: GRPCCallType.unary
        )

        public static let state = GRPCMethodDescriptor(
            name: "State",
            path: "/event_store.client.projections.Projections/State",
            type: GRPCCallType.unary
        )

        public static let result = GRPCMethodDescriptor(
            name: "Result",
            path: "/event_store.client.projections.Projections/Result",
            type: GRPCCallType.unary
        )

        public static let restartSubsystem = GRPCMethodDescriptor(
            name: "RestartSubsystem",
            path: "/event_store.client.projections.Projections/RestartSubsystem",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Client_Projections_ProjectionsProvider: CallHandlerProvider {
    var interceptors: EventStore_Client_Projections_ProjectionsServerInterceptorFactoryProtocol? { get }

    func create(request: EventStore_Client_Projections_CreateReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_CreateResp>

    func update(request: EventStore_Client_Projections_UpdateReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_UpdateResp>

    func delete(request: EventStore_Client_Projections_DeleteReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_DeleteResp>

    func statistics(request: EventStore_Client_Projections_StatisticsReq, context: StreamingResponseCallContext<EventStore_Client_Projections_StatisticsResp>) -> EventLoopFuture<GRPCStatus>

    func disable(request: EventStore_Client_Projections_DisableReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_DisableResp>

    func enable(request: EventStore_Client_Projections_EnableReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_EnableResp>

    func reset(request: EventStore_Client_Projections_ResetReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_ResetResp>

    func state(request: EventStore_Client_Projections_StateReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_StateResp>

    func result(request: EventStore_Client_Projections_ResultReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Projections_ResultResp>

    func restartSubsystem(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>
}

extension EventStore_Client_Projections_ProjectionsProvider {
    public var serviceName: Substring {
        EventStore_Client_Projections_ProjectionsServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Create":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_CreateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_CreateResp>(),
                interceptors: interceptors?.makeCreateInterceptors() ?? [],
                userFunction: create(request:context:)
            )

        case "Update":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_UpdateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_UpdateResp>(),
                interceptors: interceptors?.makeUpdateInterceptors() ?? [],
                userFunction: update(request:context:)
            )

        case "Delete":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_DeleteReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_DeleteResp>(),
                interceptors: interceptors?.makeDeleteInterceptors() ?? [],
                userFunction: delete(request:context:)
            )

        case "Statistics":
            ServerStreamingServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_StatisticsReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_StatisticsResp>(),
                interceptors: interceptors?.makeStatisticsInterceptors() ?? [],
                userFunction: statistics(request:context:)
            )

        case "Disable":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_DisableReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_DisableResp>(),
                interceptors: interceptors?.makeDisableInterceptors() ?? [],
                userFunction: disable(request:context:)
            )

        case "Enable":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_EnableReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_EnableResp>(),
                interceptors: interceptors?.makeEnableInterceptors() ?? [],
                userFunction: enable(request:context:)
            )

        case "Reset":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_ResetReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_ResetResp>(),
                interceptors: interceptors?.makeResetInterceptors() ?? [],
                userFunction: reset(request:context:)
            )

        case "State":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_StateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_StateResp>(),
                interceptors: interceptors?.makeStateInterceptors() ?? [],
                userFunction: state(request:context:)
            )

        case "Result":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_ResultReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_ResultResp>(),
                interceptors: interceptors?.makeResultInterceptors() ?? [],
                userFunction: result(request:context:)
            )

        case "RestartSubsystem":
            UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeRestartSubsystemInterceptors() ?? [],
                userFunction: restartSubsystem(request:context:)
            )

        default:
            nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Projections_ProjectionsAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Projections_ProjectionsServerInterceptorFactoryProtocol? { get }

    func create(
        request: EventStore_Client_Projections_CreateReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_CreateResp

    func update(
        request: EventStore_Client_Projections_UpdateReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_UpdateResp

    func delete(
        request: EventStore_Client_Projections_DeleteReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_DeleteResp

    func statistics(
        request: EventStore_Client_Projections_StatisticsReq,
        responseStream: GRPCAsyncResponseStreamWriter<EventStore_Client_Projections_StatisticsResp>,
        context: GRPCAsyncServerCallContext
    ) async throws

    func disable(
        request: EventStore_Client_Projections_DisableReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_DisableResp

    func enable(
        request: EventStore_Client_Projections_EnableReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_EnableResp

    func reset(
        request: EventStore_Client_Projections_ResetReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_ResetResp

    func state(
        request: EventStore_Client_Projections_StateReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_StateResp

    func result(
        request: EventStore_Client_Projections_ResultReq,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Projections_ResultResp

    func restartSubsystem(
        request: EventStore_Client_Empty,
        context: GRPCAsyncServerCallContext
    ) async throws -> EventStore_Client_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Projections_ProjectionsAsyncProvider {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Projections_ProjectionsServerMetadata.serviceDescriptor
    }

    public var serviceName: Substring {
        EventStore_Client_Projections_ProjectionsServerMetadata.serviceDescriptor.fullName[...]
    }

    public var interceptors: EventStore_Client_Projections_ProjectionsServerInterceptorFactoryProtocol? {
        nil
    }

    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Create":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_CreateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_CreateResp>(),
                interceptors: interceptors?.makeCreateInterceptors() ?? [],
                wrapping: { try await self.create(request: $0, context: $1) }
            )

        case "Update":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_UpdateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_UpdateResp>(),
                interceptors: interceptors?.makeUpdateInterceptors() ?? [],
                wrapping: { try await self.update(request: $0, context: $1) }
            )

        case "Delete":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_DeleteReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_DeleteResp>(),
                interceptors: interceptors?.makeDeleteInterceptors() ?? [],
                wrapping: { try await self.delete(request: $0, context: $1) }
            )

        case "Statistics":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_StatisticsReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_StatisticsResp>(),
                interceptors: interceptors?.makeStatisticsInterceptors() ?? [],
                wrapping: { try await self.statistics(request: $0, responseStream: $1, context: $2) }
            )

        case "Disable":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_DisableReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_DisableResp>(),
                interceptors: interceptors?.makeDisableInterceptors() ?? [],
                wrapping: { try await self.disable(request: $0, context: $1) }
            )

        case "Enable":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_EnableReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_EnableResp>(),
                interceptors: interceptors?.makeEnableInterceptors() ?? [],
                wrapping: { try await self.enable(request: $0, context: $1) }
            )

        case "Reset":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_ResetReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_ResetResp>(),
                interceptors: interceptors?.makeResetInterceptors() ?? [],
                wrapping: { try await self.reset(request: $0, context: $1) }
            )

        case "State":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_StateReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_StateResp>(),
                interceptors: interceptors?.makeStateInterceptors() ?? [],
                wrapping: { try await self.state(request: $0, context: $1) }
            )

        case "Result":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Projections_ResultReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Projections_ResultResp>(),
                interceptors: interceptors?.makeResultInterceptors() ?? [],
                wrapping: { try await self.result(request: $0, context: $1) }
            )

        case "RestartSubsystem":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
                interceptors: interceptors?.makeRestartSubsystemInterceptors() ?? [],
                wrapping: { try await self.restartSubsystem(request: $0, context: $1) }
            )

        default:
            nil
        }
    }
}

public protocol EventStore_Client_Projections_ProjectionsServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'create'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCreateInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_CreateReq, EventStore_Client_Projections_CreateResp>]

    /// - Returns: Interceptors to use when handling 'update'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpdateInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_UpdateReq, EventStore_Client_Projections_UpdateResp>]

    /// - Returns: Interceptors to use when handling 'delete'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_DeleteReq, EventStore_Client_Projections_DeleteResp>]

    /// - Returns: Interceptors to use when handling 'statistics'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeStatisticsInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_StatisticsReq, EventStore_Client_Projections_StatisticsResp>]

    /// - Returns: Interceptors to use when handling 'disable'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDisableInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_DisableReq, EventStore_Client_Projections_DisableResp>]

    /// - Returns: Interceptors to use when handling 'enable'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeEnableInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_EnableReq, EventStore_Client_Projections_EnableResp>]

    /// - Returns: Interceptors to use when handling 'reset'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeResetInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_ResetReq, EventStore_Client_Projections_ResetResp>]

    /// - Returns: Interceptors to use when handling 'state'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeStateInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_StateReq, EventStore_Client_Projections_StateResp>]

    /// - Returns: Interceptors to use when handling 'result'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeResultInterceptors() -> [ServerInterceptor<EventStore_Client_Projections_ResultReq, EventStore_Client_Projections_ResultResp>]

    /// - Returns: Interceptors to use when handling 'restartSubsystem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRestartSubsystemInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_Projections_ProjectionsServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Projections",
        fullName: "event_store.client.projections.Projections",
        methods: [
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.create,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.update,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.delete,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.statistics,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.disable,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.enable,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.reset,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.state,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.result,
            EventStore_Client_Projections_ProjectionsServerMetadata.Methods.restartSubsystem,
        ]
    )

    public enum Methods {
        public static let create = GRPCMethodDescriptor(
            name: "Create",
            path: "/event_store.client.projections.Projections/Create",
            type: GRPCCallType.unary
        )

        public static let update = GRPCMethodDescriptor(
            name: "Update",
            path: "/event_store.client.projections.Projections/Update",
            type: GRPCCallType.unary
        )

        public static let delete = GRPCMethodDescriptor(
            name: "Delete",
            path: "/event_store.client.projections.Projections/Delete",
            type: GRPCCallType.unary
        )

        public static let statistics = GRPCMethodDescriptor(
            name: "Statistics",
            path: "/event_store.client.projections.Projections/Statistics",
            type: GRPCCallType.serverStreaming
        )

        public static let disable = GRPCMethodDescriptor(
            name: "Disable",
            path: "/event_store.client.projections.Projections/Disable",
            type: GRPCCallType.unary
        )

        public static let enable = GRPCMethodDescriptor(
            name: "Enable",
            path: "/event_store.client.projections.Projections/Enable",
            type: GRPCCallType.unary
        )

        public static let reset = GRPCMethodDescriptor(
            name: "Reset",
            path: "/event_store.client.projections.Projections/Reset",
            type: GRPCCallType.unary
        )

        public static let state = GRPCMethodDescriptor(
            name: "State",
            path: "/event_store.client.projections.Projections/State",
            type: GRPCCallType.unary
        )

        public static let result = GRPCMethodDescriptor(
            name: "Result",
            path: "/event_store.client.projections.Projections/Result",
            type: GRPCCallType.unary
        )

        public static let restartSubsystem = GRPCMethodDescriptor(
            name: "RestartSubsystem",
            path: "/event_store.client.projections.Projections/RestartSubsystem",
            type: GRPCCallType.unary
        )
    }
}
