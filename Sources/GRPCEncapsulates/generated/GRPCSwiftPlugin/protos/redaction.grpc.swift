//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/redaction.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `EventStore_Client_Redaction_RedactionClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Client_Redaction_RedactionClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? { get }

    func getEventPositions(
        callOptions: CallOptions?,
        handler: @escaping (EventStore_Client_Redaction_GetEventPositionResp) -> Void
    ) -> BidirectionalStreamingCall<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp>

    func switchChunks(
        callOptions: CallOptions?,
        handler: @escaping (EventStore_Client_Redaction_SwitchChunkResp) -> Void
    ) -> BidirectionalStreamingCall<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp>
}

extension EventStore_Client_Redaction_RedactionClientProtocol {
    public var serviceName: String {
        "event_store.client.redaction.Redaction"
    }

    /// Bidirectional streaming call to GetEventPositions
    ///
    /// Callers should use the `send` method on the returned object to send messages
    /// to the server. The caller should send an `.end` after the final message has been sent.
    ///
    /// - Parameters:
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
    public func getEventPositions(
        callOptions: CallOptions? = nil,
        handler: @escaping (EventStore_Client_Redaction_GetEventPositionResp) -> Void
    ) -> BidirectionalStreamingCall<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp> {
        makeBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.getEventPositions.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? [],
            handler: handler
        )
    }

    /// Bidirectional streaming call to SwitchChunks
    ///
    /// Callers should use the `send` method on the returned object to send messages
    /// to the server. The caller should send an `.end` after the final message has been sent.
    ///
    /// - Parameters:
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
    public func switchChunks(
        callOptions: CallOptions? = nil,
        handler: @escaping (EventStore_Client_Redaction_SwitchChunkResp) -> Void
    ) -> BidirectionalStreamingCall<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp> {
        makeBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.switchChunks.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSwitchChunksInterceptors() ?? [],
            handler: handler
        )
    }
}

@available(*, deprecated)
extension EventStore_Client_Redaction_RedactionClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Client_Redaction_RedactionNIOClient")
public final class EventStore_Client_Redaction_RedactionClient: EventStore_Client_Redaction_RedactionClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the event_store.client.redaction.Redaction service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct EventStore_Client_Redaction_RedactionNIOClient: EventStore_Client_Redaction_RedactionClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol?

    /// Creates a client for the event_store.client.redaction.Redaction service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Redaction_RedactionAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? { get }

    func makeGetEventPositionsCall(
        callOptions: CallOptions?
    ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp>

    func makeSwitchChunksCall(
        callOptions: CallOptions?
    ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Redaction_RedactionAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Redaction_RedactionClientMetadata.serviceDescriptor
    }

    public var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? {
        nil
    }

    public func makeGetEventPositionsCall(
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp> {
        makeAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.getEventPositions.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? []
        )
    }

    public func makeSwitchChunksCall(
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp> {
        makeAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.switchChunks.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSwitchChunksInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Redaction_RedactionAsyncClientProtocol {
    public func getEventPositions(
        _ requests: some Sequence<EventStore_Client_Redaction_GetEventPositionReq>,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<EventStore_Client_Redaction_GetEventPositionResp> {
        performAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.getEventPositions.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? []
        )
    }

    public func getEventPositions<RequestStream>(
        _ requests: RequestStream,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<EventStore_Client_Redaction_GetEventPositionResp> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == EventStore_Client_Redaction_GetEventPositionReq {
        performAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.getEventPositions.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? []
        )
    }

    public func switchChunks(
        _ requests: some Sequence<EventStore_Client_Redaction_SwitchChunkReq>,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<EventStore_Client_Redaction_SwitchChunkResp> {
        performAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.switchChunks.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSwitchChunksInterceptors() ?? []
        )
    }

    public func switchChunks<RequestStream>(
        _ requests: RequestStream,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<EventStore_Client_Redaction_SwitchChunkResp> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == EventStore_Client_Redaction_SwitchChunkReq {
        performAsyncBidirectionalStreamingCall(
            path: EventStore_Client_Redaction_RedactionClientMetadata.Methods.switchChunks.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSwitchChunksInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Client_Redaction_RedactionAsyncClient: EventStore_Client_Redaction_RedactionAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol EventStore_Client_Redaction_RedactionClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'getEventPositions'.
    func makeGetEventPositionsInterceptors() -> [ClientInterceptor<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp>]

    /// - Returns: Interceptors to use when invoking 'switchChunks'.
    func makeSwitchChunksInterceptors() -> [ClientInterceptor<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp>]
}

public enum EventStore_Client_Redaction_RedactionClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Redaction",
        fullName: "event_store.client.redaction.Redaction",
        methods: [
            EventStore_Client_Redaction_RedactionClientMetadata.Methods.getEventPositions,
            EventStore_Client_Redaction_RedactionClientMetadata.Methods.switchChunks,
        ]
    )

    public enum Methods {
        public static let getEventPositions = GRPCMethodDescriptor(
            name: "GetEventPositions",
            path: "/event_store.client.redaction.Redaction/GetEventPositions",
            type: GRPCCallType.bidirectionalStreaming
        )

        public static let switchChunks = GRPCMethodDescriptor(
            name: "SwitchChunks",
            path: "/event_store.client.redaction.Redaction/SwitchChunks",
            type: GRPCCallType.bidirectionalStreaming
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Client_Redaction_RedactionProvider: CallHandlerProvider {
    var interceptors: EventStore_Client_Redaction_RedactionServerInterceptorFactoryProtocol? { get }

    func getEventPositions(context: StreamingResponseCallContext<EventStore_Client_Redaction_GetEventPositionResp>) -> EventLoopFuture<(StreamEvent<EventStore_Client_Redaction_GetEventPositionReq>) -> Void>

    func switchChunks(context: StreamingResponseCallContext<EventStore_Client_Redaction_SwitchChunkResp>) -> EventLoopFuture<(StreamEvent<EventStore_Client_Redaction_SwitchChunkReq>) -> Void>
}

extension EventStore_Client_Redaction_RedactionProvider {
    public var serviceName: Substring {
        EventStore_Client_Redaction_RedactionServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetEventPositions":
            BidirectionalStreamingServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Redaction_GetEventPositionReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Redaction_GetEventPositionResp>(),
                interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? [],
                observerFactory: getEventPositions(context:)
            )

        case "SwitchChunks":
            BidirectionalStreamingServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Redaction_SwitchChunkReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Redaction_SwitchChunkResp>(),
                interceptors: interceptors?.makeSwitchChunksInterceptors() ?? [],
                observerFactory: switchChunks(context:)
            )

        default:
            nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Redaction_RedactionAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: EventStore_Client_Redaction_RedactionServerInterceptorFactoryProtocol? { get }

    func getEventPositions(
        requestStream: GRPCAsyncRequestStream<EventStore_Client_Redaction_GetEventPositionReq>,
        responseStream: GRPCAsyncResponseStreamWriter<EventStore_Client_Redaction_GetEventPositionResp>,
        context: GRPCAsyncServerCallContext
    ) async throws

    func switchChunks(
        requestStream: GRPCAsyncRequestStream<EventStore_Client_Redaction_SwitchChunkReq>,
        responseStream: GRPCAsyncResponseStreamWriter<EventStore_Client_Redaction_SwitchChunkResp>,
        context: GRPCAsyncServerCallContext
    ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Redaction_RedactionAsyncProvider {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        EventStore_Client_Redaction_RedactionServerMetadata.serviceDescriptor
    }

    public var serviceName: Substring {
        EventStore_Client_Redaction_RedactionServerMetadata.serviceDescriptor.fullName[...]
    }

    public var interceptors: EventStore_Client_Redaction_RedactionServerInterceptorFactoryProtocol? {
        nil
    }

    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetEventPositions":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Redaction_GetEventPositionReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Redaction_GetEventPositionResp>(),
                interceptors: interceptors?.makeGetEventPositionsInterceptors() ?? [],
                wrapping: { try await self.getEventPositions(requestStream: $0, responseStream: $1, context: $2) }
            )

        case "SwitchChunks":
            GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<EventStore_Client_Redaction_SwitchChunkReq>(),
                responseSerializer: ProtobufSerializer<EventStore_Client_Redaction_SwitchChunkResp>(),
                interceptors: interceptors?.makeSwitchChunksInterceptors() ?? [],
                wrapping: { try await self.switchChunks(requestStream: $0, responseStream: $1, context: $2) }
            )

        default:
            nil
        }
    }
}

public protocol EventStore_Client_Redaction_RedactionServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'getEventPositions'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetEventPositionsInterceptors() -> [ServerInterceptor<EventStore_Client_Redaction_GetEventPositionReq, EventStore_Client_Redaction_GetEventPositionResp>]

    /// - Returns: Interceptors to use when handling 'switchChunks'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSwitchChunksInterceptors() -> [ServerInterceptor<EventStore_Client_Redaction_SwitchChunkReq, EventStore_Client_Redaction_SwitchChunkResp>]
}

public enum EventStore_Client_Redaction_RedactionServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Redaction",
        fullName: "event_store.client.redaction.Redaction",
        methods: [
            EventStore_Client_Redaction_RedactionServerMetadata.Methods.getEventPositions,
            EventStore_Client_Redaction_RedactionServerMetadata.Methods.switchChunks,
        ]
    )

    public enum Methods {
        public static let getEventPositions = GRPCMethodDescriptor(
            name: "GetEventPositions",
            path: "/event_store.client.redaction.Redaction/GetEventPositions",
            type: GRPCCallType.bidirectionalStreaming
        )

        public static let switchChunks = GRPCMethodDescriptor(
            name: "SwitchChunks",
            path: "/event_store.client.redaction.Redaction/SwitchChunks",
            type: GRPCCallType.bidirectionalStreaming
        )
    }
}
