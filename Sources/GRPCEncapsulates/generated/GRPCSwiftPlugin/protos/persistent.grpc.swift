//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/persistent.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? { get }

  func create(
    _ request: EventStore_Client_PersistentSubscriptions_CreateReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp>

  func update(
    _ request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp>

  func delete(
    _ request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp>

  func read(
    callOptions: CallOptions?,
    handler: @escaping (EventStore_Client_PersistentSubscriptions_ReadResp) -> Void
  ) -> BidirectionalStreamingCall<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp>

  func getInfo(
    _ request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp>

  func replayParked(
    _ request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp>

  func list(
    _ request: EventStore_Client_PersistentSubscriptions_ListReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp>

  func restartSubsystem(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientProtocol {
  public var serviceName: String {
    return "event_store.client.persistent_subscriptions.PersistentSubscriptions"
  }

  /// Unary call to Create
  ///
  /// - Parameters:
  ///   - request: Request to send to Create.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func create(
    _ request: EventStore_Client_PersistentSubscriptions_CreateReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func update(
    _ request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delete(
    _ request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to Read
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func read(
    callOptions: CallOptions? = nil,
    handler: @escaping (EventStore_Client_PersistentSubscriptions_ReadResp) -> Void
  ) -> BidirectionalStreamingCall<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp> {
    return self.makeBidirectionalStreamingCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.read.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInfo(
    _ request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  /// Unary call to ReplayParked
  ///
  /// - Parameters:
  ///   - request: Request to send to ReplayParked.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func replayParked(
    _ request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.replayParked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplayParkedInterceptors() ?? []
    )
  }

  /// Unary call to List
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func list(
    _ request: EventStore_Client_PersistentSubscriptions_ListReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// Unary call to RestartSubsystem
  ///
  /// - Parameters:
  ///   - request: Request to send to RestartSubsystem.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restartSubsystem(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.restartSubsystem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartSubsystemInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsNIOClient")
public final class EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClient: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the event_store.client.persistent_subscriptions.PersistentSubscriptions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsNIOClient: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol?

  /// Creates a client for the event_store.client.persistent_subscriptions.PersistentSubscriptions service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? { get }

  func makeCreateCall(
    _ request: EventStore_Client_PersistentSubscriptions_CreateReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp>

  func makeUpdateCall(
    _ request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp>

  func makeDeleteCall(
    _ request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp>

  func makeReadCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp>

  func makeGetInfoCall(
    _ request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp>

  func makeReplayParkedCall(
    _ request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp>

  func makeListCall(
    _ request: EventStore_Client_PersistentSubscriptions_ListReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp>

  func makeRestartSubsystemCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.serviceDescriptor
  }

  public var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateCall(
    _ request: EventStore_Client_PersistentSubscriptions_CreateReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  public func makeUpdateCall(
    _ request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  public func makeDeleteCall(
    _ request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  public func makeReadCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.read.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  public func makeGetInfoCall(
    _ request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  public func makeReplayParkedCall(
    _ request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.replayParked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplayParkedInterceptors() ?? []
    )
  }

  public func makeListCall(
    _ request: EventStore_Client_PersistentSubscriptions_ListReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  public func makeRestartSubsystemCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.restartSubsystem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartSubsystemInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncClientProtocol {
  public func create(
    _ request: EventStore_Client_PersistentSubscriptions_CreateReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_CreateResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  public func update(
    _ request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_UpdateResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  public func delete(
    _ request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_DeleteResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  public func read<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<EventStore_Client_PersistentSubscriptions_ReadResp> where RequestStream: Sequence, RequestStream.Element == EventStore_Client_PersistentSubscriptions_ReadReq {
    return self.performAsyncBidirectionalStreamingCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.read.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  public func read<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<EventStore_Client_PersistentSubscriptions_ReadResp> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == EventStore_Client_PersistentSubscriptions_ReadReq {
    return self.performAsyncBidirectionalStreamingCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.read.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  public func getInfo(
    _ request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_GetInfoResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.getInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  public func replayParked(
    _ request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_ReplayParkedResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.replayParked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReplayParkedInterceptors() ?? []
    )
  }

  public func list(
    _ request: EventStore_Client_PersistentSubscriptions_ListReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_PersistentSubscriptions_ListResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  public func restartSubsystem(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.restartSubsystem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartSubsystemInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncClient: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'create'.
  func makeCreateInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp>]

  /// - Returns: Interceptors to use when invoking 'update'.
  func makeUpdateInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp>]

  /// - Returns: Interceptors to use when invoking 'read'.
  func makeReadInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp>]

  /// - Returns: Interceptors to use when invoking 'getInfo'.
  func makeGetInfoInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp>]

  /// - Returns: Interceptors to use when invoking 'replayParked'.
  func makeReplayParkedInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp>]

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp>]

  /// - Returns: Interceptors to use when invoking 'restartSubsystem'.
  func makeRestartSubsystemInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PersistentSubscriptions",
    fullName: "event_store.client.persistent_subscriptions.PersistentSubscriptions",
    methods: [
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.create,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.update,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.delete,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.read,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.getInfo,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.replayParked,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.list,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsClientMetadata.Methods.restartSubsystem,
    ]
  )

  public enum Methods {
    public static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create",
      type: GRPCCallType.unary
    )

    public static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete",
      type: GRPCCallType.unary
    )

    public static let read = GRPCMethodDescriptor(
      name: "Read",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Read",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let getInfo = GRPCMethodDescriptor(
      name: "GetInfo",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/GetInfo",
      type: GRPCCallType.unary
    )

    public static let replayParked = GRPCMethodDescriptor(
      name: "ReplayParked",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/ReplayParked",
      type: GRPCCallType.unary
    )

    public static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/List",
      type: GRPCCallType.unary
    )

    public static let restartSubsystem = GRPCMethodDescriptor(
      name: "RestartSubsystem",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/RestartSubsystem",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsProvider: CallHandlerProvider {
  var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerInterceptorFactoryProtocol? { get }

  func create(request: EventStore_Client_PersistentSubscriptions_CreateReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_CreateResp>

  func update(request: EventStore_Client_PersistentSubscriptions_UpdateReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_UpdateResp>

  func delete(request: EventStore_Client_PersistentSubscriptions_DeleteReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_DeleteResp>

  func read(context: StreamingResponseCallContext<EventStore_Client_PersistentSubscriptions_ReadResp>) -> EventLoopFuture<(StreamEvent<EventStore_Client_PersistentSubscriptions_ReadReq>) -> Void>

  func getInfo(request: EventStore_Client_PersistentSubscriptions_GetInfoReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_GetInfoResp>

  func replayParked(request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>

  func list(request: EventStore_Client_PersistentSubscriptions_ListReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_PersistentSubscriptions_ListResp>

  func restartSubsystem(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>
}

extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsProvider {
  public var serviceName: Substring {
    return EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_CreateReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_CreateResp>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        userFunction: self.create(request:context:)
      )

    case "Update":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_UpdateReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_UpdateResp>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        userFunction: self.update(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_DeleteReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_DeleteResp>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "Read":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReadReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReadResp>(),
        interceptors: self.interceptors?.makeReadInterceptors() ?? [],
        observerFactory: self.read(context:)
      )

    case "GetInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>(),
        interceptors: self.interceptors?.makeGetInfoInterceptors() ?? [],
        userFunction: self.getInfo(request:context:)
      )

    case "ReplayParked":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>(),
        interceptors: self.interceptors?.makeReplayParkedInterceptors() ?? [],
        userFunction: self.replayParked(request:context:)
      )

    case "List":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ListReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ListResp>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        userFunction: self.list(request:context:)
      )

    case "RestartSubsystem":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeRestartSubsystemInterceptors() ?? [],
        userFunction: self.restartSubsystem(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerInterceptorFactoryProtocol? { get }

  func create(
    request: EventStore_Client_PersistentSubscriptions_CreateReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_CreateResp

  func update(
    request: EventStore_Client_PersistentSubscriptions_UpdateReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_UpdateResp

  func delete(
    request: EventStore_Client_PersistentSubscriptions_DeleteReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_DeleteResp

  func read(
    requestStream: GRPCAsyncRequestStream<EventStore_Client_PersistentSubscriptions_ReadReq>,
    responseStream: GRPCAsyncResponseStreamWriter<EventStore_Client_PersistentSubscriptions_ReadResp>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func getInfo(
    request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_GetInfoResp

  func replayParked(
    request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_ReplayParkedResp

  func list(
    request: EventStore_Client_PersistentSubscriptions_ListReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_PersistentSubscriptions_ListResp

  func restartSubsystem(
    request: EventStore_Client_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_CreateReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_CreateResp>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        wrapping: { try await self.create(request: $0, context: $1) }
      )

    case "Update":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_UpdateReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_UpdateResp>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        wrapping: { try await self.update(request: $0, context: $1) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_DeleteReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_DeleteResp>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    case "Read":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReadReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReadResp>(),
        interceptors: self.interceptors?.makeReadInterceptors() ?? [],
        wrapping: { try await self.read(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "GetInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>(),
        interceptors: self.interceptors?.makeGetInfoInterceptors() ?? [],
        wrapping: { try await self.getInfo(request: $0, context: $1) }
      )

    case "ReplayParked":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>(),
        interceptors: self.interceptors?.makeReplayParkedInterceptors() ?? [],
        wrapping: { try await self.replayParked(request: $0, context: $1) }
      )

    case "List":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ListReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ListResp>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        wrapping: { try await self.list(request: $0, context: $1) }
      )

    case "RestartSubsystem":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeRestartSubsystemInterceptors() ?? [],
        wrapping: { try await self.restartSubsystem(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'create'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_CreateReq, EventStore_Client_PersistentSubscriptions_CreateResp>]

  /// - Returns: Interceptors to use when handling 'update'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_UpdateReq, EventStore_Client_PersistentSubscriptions_UpdateResp>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_DeleteReq, EventStore_Client_PersistentSubscriptions_DeleteResp>]

  /// - Returns: Interceptors to use when handling 'read'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_ReadReq, EventStore_Client_PersistentSubscriptions_ReadResp>]

  /// - Returns: Interceptors to use when handling 'getInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInfoInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_GetInfoReq, EventStore_Client_PersistentSubscriptions_GetInfoResp>]

  /// - Returns: Interceptors to use when handling 'replayParked'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReplayParkedInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_ReplayParkedReq, EventStore_Client_PersistentSubscriptions_ReplayParkedResp>]

  /// - Returns: Interceptors to use when handling 'list'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterceptors() -> [ServerInterceptor<EventStore_Client_PersistentSubscriptions_ListReq, EventStore_Client_PersistentSubscriptions_ListResp>]

  /// - Returns: Interceptors to use when handling 'restartSubsystem'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRestartSubsystemInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PersistentSubscriptions",
    fullName: "event_store.client.persistent_subscriptions.PersistentSubscriptions",
    methods: [
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.create,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.update,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.delete,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.read,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.getInfo,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.replayParked,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.list,
      EventStore_Client_PersistentSubscriptions_PersistentSubscriptionsServerMetadata.Methods.restartSubsystem,
    ]
  )

  public enum Methods {
    public static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Create",
      type: GRPCCallType.unary
    )

    public static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Update",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Delete",
      type: GRPCCallType.unary
    )

    public static let read = GRPCMethodDescriptor(
      name: "Read",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/Read",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let getInfo = GRPCMethodDescriptor(
      name: "GetInfo",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/GetInfo",
      type: GRPCCallType.unary
    )

    public static let replayParked = GRPCMethodDescriptor(
      name: "ReplayParked",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/ReplayParked",
      type: GRPCCallType.unary
    )

    public static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/List",
      type: GRPCCallType.unary
    )

    public static let restartSubsystem = GRPCMethodDescriptor(
      name: "RestartSubsystem",
      path: "/event_store.client.persistent_subscriptions.PersistentSubscriptions/RestartSubsystem",
      type: GRPCCallType.unary
    )
  }
}
