//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/operations.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `EventStore_Client_Operations_OperationsClient`, then call methods of this protocol to make API calls.
public protocol EventStore_Client_Operations_OperationsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? { get }

  func startScavenge(
    _ request: EventStore_Client_Operations_StartScavengeReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp>

  func stopScavenge(
    _ request: EventStore_Client_Operations_StopScavengeReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp>

  func shutdown(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func mergeIndexes(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func resignNode(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func setNodePriority(
    _ request: EventStore_Client_Operations_SetNodePriorityReq,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty>

  func restartPersistentSubscriptions(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

extension EventStore_Client_Operations_OperationsClientProtocol {
  public var serviceName: String {
    return "event_store.client.operations.Operations"
  }

  /// Unary call to StartScavenge
  ///
  /// - Parameters:
  ///   - request: Request to send to StartScavenge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startScavenge(
    _ request: EventStore_Client_Operations_StartScavengeReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.startScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartScavengeInterceptors() ?? []
    )
  }

  /// Unary call to StopScavenge
  ///
  /// - Parameters:
  ///   - request: Request to send to StopScavenge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stopScavenge(
    _ request: EventStore_Client_Operations_StopScavengeReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.stopScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopScavengeInterceptors() ?? []
    )
  }

  /// Unary call to Shutdown
  ///
  /// - Parameters:
  ///   - request: Request to send to Shutdown.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shutdown(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  /// Unary call to MergeIndexes
  ///
  /// - Parameters:
  ///   - request: Request to send to MergeIndexes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mergeIndexes(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.mergeIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMergeIndexesInterceptors() ?? []
    )
  }

  /// Unary call to ResignNode
  ///
  /// - Parameters:
  ///   - request: Request to send to ResignNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resignNode(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.resignNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResignNodeInterceptors() ?? []
    )
  }

  /// Unary call to SetNodePriority
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNodePriority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setNodePriority(
    _ request: EventStore_Client_Operations_SetNodePriorityReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.setNodePriority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNodePriorityInterceptors() ?? []
    )
  }

  /// Unary call to RestartPersistentSubscriptions
  ///
  /// - Parameters:
  ///   - request: Request to send to RestartPersistentSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restartPersistentSubscriptions(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.restartPersistentSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartPersistentSubscriptionsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension EventStore_Client_Operations_OperationsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EventStore_Client_Operations_OperationsNIOClient")
public final class EventStore_Client_Operations_OperationsClient: EventStore_Client_Operations_OperationsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the event_store.client.operations.Operations service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct EventStore_Client_Operations_OperationsNIOClient: EventStore_Client_Operations_OperationsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol?

  /// Creates a client for the event_store.client.operations.Operations service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Operations_OperationsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? { get }

  func makeStartScavengeCall(
    _ request: EventStore_Client_Operations_StartScavengeReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp>

  func makeStopScavengeCall(
    _ request: EventStore_Client_Operations_StopScavengeReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp>

  func makeShutdownCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func makeMergeIndexesCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func makeResignNodeCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>

  func makeSetNodePriorityCall(
    _ request: EventStore_Client_Operations_SetNodePriorityReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty>

  func makeRestartPersistentSubscriptionsCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Operations_OperationsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EventStore_Client_Operations_OperationsClientMetadata.serviceDescriptor
  }

  public var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStartScavengeCall(
    _ request: EventStore_Client_Operations_StartScavengeReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.startScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartScavengeInterceptors() ?? []
    )
  }

  public func makeStopScavengeCall(
    _ request: EventStore_Client_Operations_StopScavengeReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.stopScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopScavengeInterceptors() ?? []
    )
  }

  public func makeShutdownCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  public func makeMergeIndexesCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.mergeIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMergeIndexesInterceptors() ?? []
    )
  }

  public func makeResignNodeCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.resignNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResignNodeInterceptors() ?? []
    )
  }

  public func makeSetNodePriorityCall(
    _ request: EventStore_Client_Operations_SetNodePriorityReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.setNodePriority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNodePriorityInterceptors() ?? []
    )
  }

  public func makeRestartPersistentSubscriptionsCall(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EventStore_Client_Empty, EventStore_Client_Empty> {
    return self.makeAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.restartPersistentSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartPersistentSubscriptionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Operations_OperationsAsyncClientProtocol {
  public func startScavenge(
    _ request: EventStore_Client_Operations_StartScavengeReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Operations_ScavengeResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.startScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartScavengeInterceptors() ?? []
    )
  }

  public func stopScavenge(
    _ request: EventStore_Client_Operations_StopScavengeReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Operations_ScavengeResp {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.stopScavenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopScavengeInterceptors() ?? []
    )
  }

  public func shutdown(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  public func mergeIndexes(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.mergeIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMergeIndexesInterceptors() ?? []
    )
  }

  public func resignNode(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.resignNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResignNodeInterceptors() ?? []
    )
  }

  public func setNodePriority(
    _ request: EventStore_Client_Operations_SetNodePriorityReq,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.setNodePriority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNodePriorityInterceptors() ?? []
    )
  }

  public func restartPersistentSubscriptions(
    _ request: EventStore_Client_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> EventStore_Client_Empty {
    return try await self.performAsyncUnaryCall(
      path: EventStore_Client_Operations_OperationsClientMetadata.Methods.restartPersistentSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartPersistentSubscriptionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EventStore_Client_Operations_OperationsAsyncClient: EventStore_Client_Operations_OperationsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol EventStore_Client_Operations_OperationsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'startScavenge'.
  func makeStartScavengeInterceptors() -> [ClientInterceptor<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp>]

  /// - Returns: Interceptors to use when invoking 'stopScavenge'.
  func makeStopScavengeInterceptors() -> [ClientInterceptor<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp>]

  /// - Returns: Interceptors to use when invoking 'shutdown'.
  func makeShutdownInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when invoking 'mergeIndexes'.
  func makeMergeIndexesInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when invoking 'resignNode'.
  func makeResignNodeInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when invoking 'setNodePriority'.
  func makeSetNodePriorityInterceptors() -> [ClientInterceptor<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when invoking 'restartPersistentSubscriptions'.
  func makeRestartPersistentSubscriptionsInterceptors() -> [ClientInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_Operations_OperationsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Operations",
    fullName: "event_store.client.operations.Operations",
    methods: [
      EventStore_Client_Operations_OperationsClientMetadata.Methods.startScavenge,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.stopScavenge,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.shutdown,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.mergeIndexes,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.resignNode,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.setNodePriority,
      EventStore_Client_Operations_OperationsClientMetadata.Methods.restartPersistentSubscriptions,
    ]
  )

  public enum Methods {
    public static let startScavenge = GRPCMethodDescriptor(
      name: "StartScavenge",
      path: "/event_store.client.operations.Operations/StartScavenge",
      type: GRPCCallType.unary
    )

    public static let stopScavenge = GRPCMethodDescriptor(
      name: "StopScavenge",
      path: "/event_store.client.operations.Operations/StopScavenge",
      type: GRPCCallType.unary
    )

    public static let shutdown = GRPCMethodDescriptor(
      name: "Shutdown",
      path: "/event_store.client.operations.Operations/Shutdown",
      type: GRPCCallType.unary
    )

    public static let mergeIndexes = GRPCMethodDescriptor(
      name: "MergeIndexes",
      path: "/event_store.client.operations.Operations/MergeIndexes",
      type: GRPCCallType.unary
    )

    public static let resignNode = GRPCMethodDescriptor(
      name: "ResignNode",
      path: "/event_store.client.operations.Operations/ResignNode",
      type: GRPCCallType.unary
    )

    public static let setNodePriority = GRPCMethodDescriptor(
      name: "SetNodePriority",
      path: "/event_store.client.operations.Operations/SetNodePriority",
      type: GRPCCallType.unary
    )

    public static let restartPersistentSubscriptions = GRPCMethodDescriptor(
      name: "RestartPersistentSubscriptions",
      path: "/event_store.client.operations.Operations/RestartPersistentSubscriptions",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol EventStore_Client_Operations_OperationsProvider: CallHandlerProvider {
  var interceptors: EventStore_Client_Operations_OperationsServerInterceptorFactoryProtocol? { get }

  func startScavenge(request: EventStore_Client_Operations_StartScavengeReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Operations_ScavengeResp>

  func stopScavenge(request: EventStore_Client_Operations_StopScavengeReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Operations_ScavengeResp>

  func shutdown(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

  func mergeIndexes(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

  func resignNode(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

  func setNodePriority(request: EventStore_Client_Operations_SetNodePriorityReq, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>

  func restartPersistentSubscriptions(request: EventStore_Client_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<EventStore_Client_Empty>
}

extension EventStore_Client_Operations_OperationsProvider {
  public var serviceName: Substring {
    return EventStore_Client_Operations_OperationsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartScavenge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_StartScavengeReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
        interceptors: self.interceptors?.makeStartScavengeInterceptors() ?? [],
        userFunction: self.startScavenge(request:context:)
      )

    case "StopScavenge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_StopScavengeReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
        interceptors: self.interceptors?.makeStopScavengeInterceptors() ?? [],
        userFunction: self.stopScavenge(request:context:)
      )

    case "Shutdown":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeShutdownInterceptors() ?? [],
        userFunction: self.shutdown(request:context:)
      )

    case "MergeIndexes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeMergeIndexesInterceptors() ?? [],
        userFunction: self.mergeIndexes(request:context:)
      )

    case "ResignNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeResignNodeInterceptors() ?? [],
        userFunction: self.resignNode(request:context:)
      )

    case "SetNodePriority":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_SetNodePriorityReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeSetNodePriorityInterceptors() ?? [],
        userFunction: self.setNodePriority(request:context:)
      )

    case "RestartPersistentSubscriptions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeRestartPersistentSubscriptionsInterceptors() ?? [],
        userFunction: self.restartPersistentSubscriptions(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EventStore_Client_Operations_OperationsAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EventStore_Client_Operations_OperationsServerInterceptorFactoryProtocol? { get }

  func startScavenge(
    request: EventStore_Client_Operations_StartScavengeReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Operations_ScavengeResp

  func stopScavenge(
    request: EventStore_Client_Operations_StopScavengeReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Operations_ScavengeResp

  func shutdown(
    request: EventStore_Client_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty

  func mergeIndexes(
    request: EventStore_Client_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty

  func resignNode(
    request: EventStore_Client_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty

  func setNodePriority(
    request: EventStore_Client_Operations_SetNodePriorityReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty

  func restartPersistentSubscriptions(
    request: EventStore_Client_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> EventStore_Client_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EventStore_Client_Operations_OperationsAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EventStore_Client_Operations_OperationsServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return EventStore_Client_Operations_OperationsServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: EventStore_Client_Operations_OperationsServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartScavenge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_StartScavengeReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
        interceptors: self.interceptors?.makeStartScavengeInterceptors() ?? [],
        wrapping: { try await self.startScavenge(request: $0, context: $1) }
      )

    case "StopScavenge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_StopScavengeReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
        interceptors: self.interceptors?.makeStopScavengeInterceptors() ?? [],
        wrapping: { try await self.stopScavenge(request: $0, context: $1) }
      )

    case "Shutdown":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeShutdownInterceptors() ?? [],
        wrapping: { try await self.shutdown(request: $0, context: $1) }
      )

    case "MergeIndexes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeMergeIndexesInterceptors() ?? [],
        wrapping: { try await self.mergeIndexes(request: $0, context: $1) }
      )

    case "ResignNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeResignNodeInterceptors() ?? [],
        wrapping: { try await self.resignNode(request: $0, context: $1) }
      )

    case "SetNodePriority":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Operations_SetNodePriorityReq>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeSetNodePriorityInterceptors() ?? [],
        wrapping: { try await self.setNodePriority(request: $0, context: $1) }
      )

    case "RestartPersistentSubscriptions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EventStore_Client_Empty>(),
        responseSerializer: ProtobufSerializer<EventStore_Client_Empty>(),
        interceptors: self.interceptors?.makeRestartPersistentSubscriptionsInterceptors() ?? [],
        wrapping: { try await self.restartPersistentSubscriptions(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol EventStore_Client_Operations_OperationsServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'startScavenge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartScavengeInterceptors() -> [ServerInterceptor<EventStore_Client_Operations_StartScavengeReq, EventStore_Client_Operations_ScavengeResp>]

  /// - Returns: Interceptors to use when handling 'stopScavenge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopScavengeInterceptors() -> [ServerInterceptor<EventStore_Client_Operations_StopScavengeReq, EventStore_Client_Operations_ScavengeResp>]

  /// - Returns: Interceptors to use when handling 'shutdown'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShutdownInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when handling 'mergeIndexes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMergeIndexesInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when handling 'resignNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResignNodeInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when handling 'setNodePriority'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetNodePriorityInterceptors() -> [ServerInterceptor<EventStore_Client_Operations_SetNodePriorityReq, EventStore_Client_Empty>]

  /// - Returns: Interceptors to use when handling 'restartPersistentSubscriptions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRestartPersistentSubscriptionsInterceptors() -> [ServerInterceptor<EventStore_Client_Empty, EventStore_Client_Empty>]
}

public enum EventStore_Client_Operations_OperationsServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Operations",
    fullName: "event_store.client.operations.Operations",
    methods: [
      EventStore_Client_Operations_OperationsServerMetadata.Methods.startScavenge,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.stopScavenge,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.shutdown,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.mergeIndexes,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.resignNode,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.setNodePriority,
      EventStore_Client_Operations_OperationsServerMetadata.Methods.restartPersistentSubscriptions,
    ]
  )

  public enum Methods {
    public static let startScavenge = GRPCMethodDescriptor(
      name: "StartScavenge",
      path: "/event_store.client.operations.Operations/StartScavenge",
      type: GRPCCallType.unary
    )

    public static let stopScavenge = GRPCMethodDescriptor(
      name: "StopScavenge",
      path: "/event_store.client.operations.Operations/StopScavenge",
      type: GRPCCallType.unary
    )

    public static let shutdown = GRPCMethodDescriptor(
      name: "Shutdown",
      path: "/event_store.client.operations.Operations/Shutdown",
      type: GRPCCallType.unary
    )

    public static let mergeIndexes = GRPCMethodDescriptor(
      name: "MergeIndexes",
      path: "/event_store.client.operations.Operations/MergeIndexes",
      type: GRPCCallType.unary
    )

    public static let resignNode = GRPCMethodDescriptor(
      name: "ResignNode",
      path: "/event_store.client.operations.Operations/ResignNode",
      type: GRPCCallType.unary
    )

    public static let setNodePriority = GRPCMethodDescriptor(
      name: "SetNodePriority",
      path: "/event_store.client.operations.Operations/SetNodePriority",
      type: GRPCCallType.unary
    )

    public static let restartPersistentSubscriptions = GRPCMethodDescriptor(
      name: "RestartPersistentSubscriptions",
      path: "/event_store.client.operations.Operations/RestartPersistentSubscriptions",
      type: GRPCCallType.unary
    )
  }
}
